type Time = int;
type SharedChat = 
 record {
   messages: vec Message;
   otherUsers: vec principal;
 };
type SetPushTokenError = variant {UserNotFound;};
type SendMessageError = 
 variant {
   IdNotFound;
   UserNotFound;
 };
type Result_9 = 
 variant {
   err: CreateChatError;
   ok;
 };
type Result_8 = 
 variant {
   err: GetMyChatError;
   ok: SharedChat;
 };
type Result_7 = 
 variant {
   err: GetMyChatHeadersError;
   ok: vec ChatHeader;
 };
type Result_6 = 
 variant {
   err: GetMyProfileError;
   ok: Profile;
 };
type Result_5 = 
 variant {
   err: GetProfileError;
   ok: Profile;
 };
type Result_4 = 
 variant {
   err: GetPublicKeyError;
   ok: text;
 };
type Result_3 = 
 variant {
   err: GetUsersError;
   ok: vec principal;
 };
type Result_2 = 
 variant {
   err: RegisterError;
   ok;
 };
type Result_11 = 
 variant {
   err: AddToChatError;
   ok;
 };
type Result_10 = 
 variant {
   err: BurnAccountError;
   ok;
 };
type Result_1 = 
 variant {
   err: SendMessageError;
   ok: SharedChat;
 };
type Result = 
 variant {
   err: SetPushTokenError;
   ok;
 };
type RegisterError = 
 variant {
   AlreadyRegistered;
   InvalidProfile;
 };
type ProfileUpdate = record {username: text;};
type Profile = 
 record {
   userPrincipal: principal;
   username: text;
 };
type MessageContent = record {message: text;};
type Message = 
 record {
   content: MessageContent;
   id: nat;
   sender: principal;
   time: Time;
 };
type GetUsersError = variant {UserNotFound;};
type GetPublicKeyError = variant {UserNotFound;};
type GetProfileError = variant {UserNotFound;};
type GetMyProfileError = variant {UserNotFound;};
type GetMyChatHeadersError = variant {UserNotFound;};
type GetMyChatError = 
 variant {
   IdNotFound;
   UserNotFound;
 };
type CreateChatError = 
 variant {
   ChatAlreadyExists;
   UserNotFound;
 };
type ChatHeader = 
 record {
   id: nat;
   key: text;
   lastMessage: opt Message;
   otherUsers: vec principal;
 };
type BurnAccountError = variant {UserNotFound;};
type AddToChatError = 
 variant {
   IdNotFound;
   UserAlreadyInChat;
   UserNotFound;
 };
service : {
  addToChat: (nat, principal, text) -> (Result_11);
  burnAccount: () -> (Result_10);
  createChat: (principal, text, text) -> (Result_9);
  getMyChat: (nat) -> (Result_8) query;
  getMyChatHeaders: () -> (Result_7) query;
  getMyProfile: () -> (Result_6) query;
  getProfile: (principal) -> (Result_5) query;
  getPublicKey: (principal) -> (Result_4) query;
  getUsers: (text) -> (Result_3) query;
  register: (ProfileUpdate, text) -> (Result_2);
  sendMessage: (nat, MessageContent) -> (Result_1);
  setPushToken: (text) -> (Result) query;
}
